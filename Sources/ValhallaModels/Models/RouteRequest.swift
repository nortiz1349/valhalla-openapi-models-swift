//
// RouteRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct RouteRequest: Codable, Hashable {
    
    static let locationsRule = ArrayRule(minItems: 2, maxItems: nil, uniqueItems: false)
    /** An identifier to disambiguate requests (echoed by the server). */
    public var id: String?
    public var locations: [RoutingWaypoint]
    public var costing: CostingModel
    public var costingOptions: CostingOptions?
    public var avoidLocations: [RoutingWaypoint]?
    /** One or multiple exterior rings of polygons in the form of nested JSON arrays. Roads intersecting these rings will be avoided during path finding. Open rings will be closed automatically. */
    public var avoidPolygons: [[[Double]]]?
    public var units: DistanceUnit?
    public var language: ValhallaLanguages?
    /** The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter. */
    public var directionsType: DirectionsOptions.DirectionsType? = .instructions
    public var format: DirectionsOptions.Format?
    public var shapeFormat: DirectionsOptions.ShapeFormat? = .polyline6
    public var bannerInstructions: Bool?
    public var voiceInstructions: Bool?
    public var alternates: Int?
    

    public init(
        id: String? = nil,
        locations: [RoutingWaypoint],
        costing: CostingModel,
        costingOptions: CostingOptions? = nil,
        avoidLocations: [RoutingWaypoint]? = nil,
        avoidPolygons: [[[Double]]]? = nil,
        units: DistanceUnit? = nil,
        language: ValhallaLanguages? = nil,
        directionsType: DirectionsOptions.DirectionsType? = .instructions,
        format: DirectionsOptions.Format? = nil,
        shapeFormat: DirectionsOptions.ShapeFormat? = .polyline6,
        bannerInstructions: Bool? = nil,
        voiceInstructions: Bool? = nil,
        alternates: Int? = nil
    ) {
        self.id = id
        self.locations = locations
        self.costing = costing
        self.costingOptions = costingOptions
        self.avoidLocations = avoidLocations
        self.avoidPolygons = avoidPolygons
        self.units = units
        self.language = language
        self.directionsType = directionsType
        self.format = format
        self.shapeFormat = shapeFormat
        self.bannerInstructions = bannerInstructions
        self.voiceInstructions = voiceInstructions
        self.alternates = alternates
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case locations
        case costing
        case costingOptions = "costing_options"
        case avoidLocations = "avoid_locations"
        case avoidPolygons = "avoid_polygons"
        case units
        case language
        case directionsType = "directions_type"
        case format
        case shapeFormat = "shape_format"
        case bannerInstructions = "banner_instructions"
        case voiceInstructions = "voice_instructions"
        case alternates
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(locations, forKey: .locations)
        try container.encode(costing, forKey: .costing)
        try container.encodeIfPresent(costingOptions, forKey: .costingOptions)
        try container.encodeIfPresent(avoidLocations, forKey: .avoidLocations)
        try container.encodeIfPresent(avoidPolygons, forKey: .avoidPolygons)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(directionsType, forKey: .directionsType)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(shapeFormat, forKey: .shapeFormat)
        try container.encodeIfPresent(bannerInstructions, forKey: .bannerInstructions)
        try container.encodeIfPresent(voiceInstructions, forKey: .voiceInstructions)
        try container.encodeIfPresent(alternates, forKey: .alternates)
    }
}
